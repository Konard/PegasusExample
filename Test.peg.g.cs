// -----------------------------------------------------------------------
// <auto-generated>
//   This code was generated by Pegasus 4.1.0.0
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

namespace
Parsers
{
    using System;
    using System.Collections.Generic;
    using Pegasus.Common;

    /// <summary>
    ///  Parses a string according to the rules of the <see cref="Parser" /> grammar.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Pegasus", "4.1.0.0")]
    public
    partial class
    Parser
    {
        private Dictionary<CacheKey, object> storage;

        /// <summary>
        ///  Parses a string according to the rules of the <see cref="Parser" /> grammar.
        /// </summary>
        /// <param name="subject">The parsing subject.</param>
        /// <param name="fileName">The optional file name to use in error messages.</param>
        /// <returns>The <see cref="double" /> parsed from <paramref name="subject" />.</returns>
        /// <exception cref="FormatException">
        ///  Thrown when parsing fails against <paramref name="subject"/>.  The exception's <code>Data["cursor"]</code> will be set with the cursor where the fatal error occurred.
        /// </exception>
        public double Parse(string subject, string fileName = null)
        {
            var cursor = new Cursor(subject, 0, fileName);
            return this.StartRuleHelper(cursor, this.additive, "additive").Value;
        }

        private IParseResult<
            #line 1 "Test.peg"
          double
            #line default
            > additive(ref Cursor cursor)
        {
            IParseResult<double> r0 = null;
            var storageKey = new CacheKey("additive", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<double>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            else
            {
                this.storage[storageKey] = null;
                var startCursor0 = cursor;
                while (true)
                {
                    IParseResult<double> r1 = null;
                    if (r1 == null)
                    {
                        var startCursor1 = cursor;
                        IParseResult<double> r2 = null;
                        var leftStart = cursor;
                        r2 = this.additive(ref cursor);
                        var leftEnd = cursor;
                        var left = ValueOrDefault(r2);
                        if (r2 != null)
                        {
                            IParseResult<string> r3 = null;
                            r3 = this.ParseLiteral(ref cursor, "+");
                            if (r3 != null)
                            {
                                IParseResult<double> r4 = null;
                                var rightStart = cursor;
                                r4 = this.multiplicative(ref cursor);
                                var rightEnd = cursor;
                                var right = ValueOrDefault(r4);
                                if (r4 != null)
                                {
                                    r1 = this.ReturnHelper<double>(startCursor1, ref cursor, state =>
                                        #line 2 "Test.peg"
                                               left + right
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor1;
                                }
                            }
                            else
                            {
                                cursor = startCursor1;
                            }
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    if (r1 == null)
                    {
                        var startCursor2 = cursor;
                        IParseResult<double> r5 = null;
                        var leftStart = cursor;
                        r5 = this.additive(ref cursor);
                        var leftEnd = cursor;
                        var left = ValueOrDefault(r5);
                        if (r5 != null)
                        {
                            IParseResult<string> r6 = null;
                            r6 = this.ParseLiteral(ref cursor, "-");
                            if (r6 != null)
                            {
                                IParseResult<double> r7 = null;
                                var rightStart = cursor;
                                r7 = this.multiplicative(ref cursor);
                                var rightEnd = cursor;
                                var right = ValueOrDefault(r7);
                                if (r7 != null)
                                {
                                    r1 = this.ReturnHelper<double>(startCursor2, ref cursor, state =>
                                        #line 3 "Test.peg"
                                               left - right
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor2;
                                }
                            }
                            else
                            {
                                cursor = startCursor2;
                            }
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    if (r1 == null)
                    {
                        r1 = this.multiplicative(ref cursor);
                    }
                    if (r1 == null || (r0 != null && r0.EndCursor.Location >= r1.EndCursor.Location))
                    {
                        break;
                    }
                    this.storage[storageKey] = r0 = r1;
                    cursor = startCursor0;
                }
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 6 "Test.peg"
                double
            #line default
            > multiplicative(ref Cursor cursor)
        {
            IParseResult<double> r0 = null;
            var storageKey = new CacheKey("multiplicative", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<double>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            else
            {
                this.storage[storageKey] = null;
                var startCursor0 = cursor;
                while (true)
                {
                    IParseResult<double> r1 = null;
                    if (r1 == null)
                    {
                        var startCursor1 = cursor;
                        IParseResult<double> r2 = null;
                        var leftStart = cursor;
                        r2 = this.multiplicative(ref cursor);
                        var leftEnd = cursor;
                        var left = ValueOrDefault(r2);
                        if (r2 != null)
                        {
                            IParseResult<string> r3 = null;
                            r3 = this.ParseLiteral(ref cursor, "*");
                            if (r3 != null)
                            {
                                IParseResult<double> r4 = null;
                                var rightStart = cursor;
                                r4 = this.power(ref cursor);
                                var rightEnd = cursor;
                                var right = ValueOrDefault(r4);
                                if (r4 != null)
                                {
                                    r1 = this.ReturnHelper<double>(startCursor1, ref cursor, state =>
                                        #line 7 "Test.peg"
                                            left * right
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor1;
                                }
                            }
                            else
                            {
                                cursor = startCursor1;
                            }
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    if (r1 == null)
                    {
                        var startCursor2 = cursor;
                        IParseResult<double> r5 = null;
                        var leftStart = cursor;
                        r5 = this.multiplicative(ref cursor);
                        var leftEnd = cursor;
                        var left = ValueOrDefault(r5);
                        if (r5 != null)
                        {
                            IParseResult<string> r6 = null;
                            r6 = this.ParseLiteral(ref cursor, "/");
                            if (r6 != null)
                            {
                                IParseResult<double> r7 = null;
                                var rightStart = cursor;
                                r7 = this.power(ref cursor);
                                var rightEnd = cursor;
                                var right = ValueOrDefault(r7);
                                if (r7 != null)
                                {
                                    r1 = this.ReturnHelper<double>(startCursor2, ref cursor, state =>
                                        #line 8 "Test.peg"
                                            left / right
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor2;
                                }
                            }
                            else
                            {
                                cursor = startCursor2;
                            }
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    if (r1 == null)
                    {
                        r1 = this.power(ref cursor);
                    }
                    if (r1 == null || (r0 != null && r0.EndCursor.Location >= r1.EndCursor.Location))
                    {
                        break;
                    }
                    this.storage[storageKey] = r0 = r1;
                    cursor = startCursor0;
                }
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 11 "Test.peg"
       double
            #line default
            > power(ref Cursor cursor)
        {
            IParseResult<double> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<double> r1 = null;
                var leftStart = cursor;
                r1 = this.primary(ref cursor);
                var leftEnd = cursor;
                var left = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<string> r2 = null;
                    r2 = this.ParseLiteral(ref cursor, "^");
                    if (r2 != null)
                    {
                        IParseResult<double> r3 = null;
                        var rightStart = cursor;
                        r3 = this.power(ref cursor);
                        var rightEnd = cursor;
                        var right = ValueOrDefault(r3);
                        if (r3 != null)
                        {
                            r0 = this.ReturnHelper<double>(startCursor0, ref cursor, state =>
                                #line 12 "Test.peg"
                                     Math.Pow(left, right)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                r0 = this.primary(ref cursor);
            }
            return r0;
        }

        private IParseResult<
            #line 15 "Test.peg"
         double
            #line default
            > primary(ref Cursor cursor)
        {
            IParseResult<double> r0 = null;
            var storageKey = new CacheKey("primary", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<double>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            else
            {
                if (r0 == null)
                {
                    r0 = this.@decimal(ref cursor);
                }
                if (r0 == null)
                {
                    var startCursor0 = cursor;
                    IParseResult<string> r1 = null;
                    r1 = this.ParseLiteral(ref cursor, "-");
                    if (r1 != null)
                    {
                        IParseResult<double> r2 = null;
                        var primaryStart = cursor;
                        r2 = this.primary(ref cursor);
                        var primaryEnd = cursor;
                        var primary = ValueOrDefault(r2);
                        if (r2 != null)
                        {
                            r0 = this.ReturnHelper<double>(startCursor0, ref cursor, state =>
                                #line 17 "Test.peg"
                            -primary
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                if (r0 == null)
                {
                    var startCursor1 = cursor;
                    IParseResult<string> r3 = null;
                    r3 = this.ParseLiteral(ref cursor, "(");
                    if (r3 != null)
                    {
                        IParseResult<double> r4 = null;
                        var additiveStart = cursor;
                        r4 = this.additive(ref cursor);
                        var additiveEnd = cursor;
                        var additive = ValueOrDefault(r4);
                        if (r4 != null)
                        {
                            IParseResult<string> r5 = null;
                            r5 = this.ParseLiteral(ref cursor, ")");
                            if (r5 != null)
                            {
                                r0 = this.ReturnHelper<double>(startCursor1, ref cursor, state =>
                                    #line 18 "Test.peg"
                                  additive
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor1;
                            }
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                this.storage[storageKey] = r0;
            }
            return r0;
        }

        private IParseResult<
            #line 20 "Test.peg"
         double
            #line default
            > @decimal(ref Cursor cursor)
        {
            IParseResult<double> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var valueStart = cursor;
            var startCursor1 = cursor;
            IParseResult<IList<string>> r2 = null;
            var startCursor2 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r3 = null;
                r3 = this.ParseClass(ref cursor, "09");
                if (r3 != null)
                {
                    l0.Add(r3.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r2 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor2;
            }
            if (r2 != null)
            {
                IParseResult<IList<string>> r4 = null;
                var startCursor3 = cursor;
                var l1 = new List<string>();
                while (l1.Count < 1)
                {
                    IParseResult<string> r5 = null;
                    var startCursor4 = cursor;
                    IParseResult<string> r6 = null;
                    r6 = this.ParseLiteral(ref cursor, ",");
                    if (r6 != null)
                    {
                        IParseResult<IList<string>> r7 = null;
                        var startCursor5 = cursor;
                        var l2 = new List<string>();
                        while (true)
                        {
                            IParseResult<string> r8 = null;
                            r8 = this.ParseClass(ref cursor, "09");
                            if (r8 != null)
                            {
                                l2.Add(r8.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        if (l2.Count >= 1)
                        {
                            r7 = this.ReturnHelper<IList<string>>(startCursor5, ref cursor, state => l2.AsReadOnly());
                        }
                        else
                        {
                            cursor = startCursor5;
                        }
                        if (r7 != null)
                        {
                            {
                                var len = cursor.Location - startCursor4.Location;
                                r5 = this.ReturnHelper<string>(startCursor4, ref cursor, state =>
                                    state.Subject.Substring(startCursor4.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor4;
                        }
                    }
                    else
                    {
                        cursor = startCursor4;
                    }
                    if (r5 != null)
                    {
                        l1.Add(r5.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r4 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                if (r4 != null)
                {
                    {
                        var len = cursor.Location - startCursor1.Location;
                        r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                            state.Subject.Substring(startCursor1.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            var valueEnd = cursor;
            var value = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<double>(startCursor0, ref cursor, state =>
                    #line 21 "Test.peg"
                                     double.Parse(value)
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<T> StartRuleHelper<T>(Cursor cursor, ParseDelegate<T> startRule, string ruleName)
        {
            try
            {
                this.storage = new Dictionary<CacheKey, object>();
                var result = startRule(ref cursor);
                if (result == null)
                {
                    throw ExceptionHelper(cursor, state => "Failed to parse '" + ruleName + "'.");
                }
                return result;
            }
            finally
            {
                this.storage = null;
            }
        }

        private IParseResult<string> ParseLiteral(ref Cursor cursor, string literal, bool ignoreCase = false)
        {
            if (cursor.Location + literal.Length <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, literal.Length);
                if (ignoreCase ? substr.Equals(literal, StringComparison.OrdinalIgnoreCase) : substr == literal)
                {
                    var endCursor = cursor.Advance(substr.Length);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseClass(ref Cursor cursor, string characterRanges, bool negated = false, bool ignoreCase = false)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var c = cursor.Subject[cursor.Location];
                bool match = false;
                for (int i = 0; !match && i < characterRanges.Length; i += 2)
                {
                    match = c >= characterRanges[i] && c <= characterRanges[i + 1];
                }
                if (!match && ignoreCase && (char.IsUpper(c) || char.IsLower(c)))
                {
                    var cs = c.ToString();
                    for (int i = 0; !match && i < characterRanges.Length; i += 2)
                    {
                        var min = characterRanges[i];
                        var max = characterRanges[i + 1];
                        for (char o = min; !match && o <= max; o++)
                        {
                            match = (char.IsUpper(o) || char.IsLower(o)) && cs.Equals(o.ToString(), StringComparison.CurrentCultureIgnoreCase);
                        }
                    }
                }
                if (match ^ negated)
                {
                    var endCursor = cursor.Advance(1);
                    var substr = cursor.Subject.Substring(cursor.Location, 1);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseAny(ref Cursor cursor)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, 1);
                var endCursor = cursor.Advance(1);
                var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                cursor = endCursor;
                return result;
            }
            return null;
        }

        private IParseResult<T> ReturnHelper<T>(Cursor startCursor, ref Cursor endCursor, Func<Cursor, T> wrappedCode)
        {
            var result = wrappedCode(endCursor);
            var lexical = result as ILexical;
            if (lexical != null && lexical.StartCursor == null && lexical.EndCursor == null)
            {
                lexical.StartCursor = startCursor;
                lexical.EndCursor = endCursor;
            }
            return new ParseResult<T>(startCursor, endCursor, result);
        }

        private IParseResult<T> ParseHelper<T>(ref Cursor cursor, ParseDelegate<T> wrappedCode)
        {
            var startCursor = cursor;
            var result = wrappedCode(ref cursor);
            if (result == null)
            {
                cursor = startCursor;
                return null;
            }
            else
            {
                cursor = cursor.WithMutability(false);
                return result;
            }
        }

        private Exception ExceptionHelper(Cursor cursor, Func<Cursor, string> wrappedCode)
        {
            var ex = new FormatException(wrappedCode(cursor));
            ex.Data["cursor"] = cursor;
            return ex;
        }

        private T ValueOrDefault<T>(IParseResult<T> result)
        {
            return result == null
                ? default(T)
                : result.Value;
        }
    }
}
